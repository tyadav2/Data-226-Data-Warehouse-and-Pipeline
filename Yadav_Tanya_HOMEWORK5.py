# -*- coding: utf-8 -*-
"""Data226_Homework5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S5mM77vcehcGFtrpP0UWn75dGXd3xxBr
"""

from airflow import DAG
from airflow.models import Variable
from airflow.decorators import task
from airflow.providers.snowflake.hooks.snowflake import SnowflakeHook

from datetime import timedelta
from datetime import datetime
import snowflake.connector
import requests

def return_snowflake_conn():

    # Initialize the SnowflakeHook
    hook = SnowflakeHook(snowflake_conn_id='snowflake_conn')

    # Execute the query and fetch results
    conn = hook.get_conn()
    return conn.cursor()

@task
def extract_last_90d_price(symbol):
    # Get the Alpha Vantage API key from Airflow variables
    vantage_api_key = Variable.get('vantage_api_key')
    url = f'https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol={symbol}&apikey={vantage_api_key}'

    # Make the API request
    response = requests.get(url)
    data = response.json()

    # Parse the last 90 days of stock data
    results = []
    for date, stock_info in data["Time Series (Daily)"].items():
        stock_info["date"] = date
        results.append(stock_info)
    return results

@task
def load_to_snowflake(cur, records, target_table):
    try:
        cur.execute("BEGIN;")
        cur.execute(f"CREATE OR REPLACE TABLE {target_table} (date varchar primary key, open float, high float, low float, close float, volume bigint);")
        for r in records:
            date = r['date']
            open_price = r['1. open']
            high_price = r['2. high']
            low_price = r['3. low']
            close_price = r['4. close']
            volume = r['5. volume']

            sql = f"INSERT INTO {target_table} (date, open, high, low, close, volume) VALUES ('{date}', {open_price}, {high_price}, {low_price}, {close_price}, {volume})"
            cur.execute(sql)
        cur.execute("COMMIT;")
    except Exception as e:
        cur.execute("ROLLBACK;")
        raise e

with DAG(
    dag_id='GOOGL_Stock_Price_ETL',
    start_date=datetime(2024, 10, 3),
    catchup=False,
    schedule='@daily',  # Adjust the schedule as needed
    tags=['ETL', 'stock', 'Snowflake'],
) as dag:

    symbol = 'GOOGL'
    target_table = "homework4.raw_data.stock_prices"
    cur = return_snowflake_conn()

    stock_data = extract_last_90d_price(symbol)
    load_to_snowflake(cur, stock_data, target_table)